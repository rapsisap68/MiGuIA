import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, getDoc, addDoc, setDoc, updateDoc, deleteDoc, onSnapshot, collection, query, where, getDocs } from 'firebase/firestore';
import { Home, PlusCircle, Layout, CheckCircle, Lightbulb, Wrench, Users, FlaskConical, Rocket, ListChecks, ScrollText, GitBranch, XCircle } from 'lucide-react'; // Added new icons

// --- Configuración de Firebase y Variables Globales ---
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-inclusive-dev-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID"
};

// Inicializa Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

// Definición de las fases de la metodología (base, se pueden añadir custom tools)
const methodologyPhases = [
  {
    id: 'discovery',
    name: 'Fase 1: Descubrimiento y Empatía',
    icon: Lightbulb,
    description: 'Entender a fondo las necesidades y desafíos de los usuarios, especialmente los de poblaciones diversas, y definir el "Por Qué" y "Para Quién".',
    defaultTools: [
      { name: 'Google Forms / Surveys', description: 'Recopilación de encuestas y cuestionarios.' },
      { name: 'Google Trends', description: 'Investigación de intereses de mercado.' },
      { name: 'NotebookLM (Google AI)', description: 'Resumen y análisis de investigación, identificación de patrones e ideas.' },
      { name: 'AI Studio (Gemini API) / Gemini', description: 'Generación de perfiles de usuario y brainstorming de historias de usuario inclusivas.' },
      { name: 'Figma (con Material Design)', description: 'Creación de bocetos (wireframes) y diseños visuales (mockups) aplicando principios de accesibilidad.' },
      { name: 'Google Material Design Accessibility', description: 'Pautas de diseño para elementos inclusivos.' }
    ],
  },
  {
    id: 'ideation',
    name: 'Fase 2: Ideación y Prototipado Rápido',
    icon: FlaskConical,
    description: 'Construir una versión muy básica de la aplicación para validar las ideas con usuarios reales lo antes posible, viendo el "Cómo" se ve rápido.',
    defaultTools: [
      { name: 'Figma', description: 'Creación de prototipos interactivos navegables.' },
      { name: 'NotebookLM (Google AI)', description: 'Análisis de resultados de pruebas de usabilidad y mejora de la accesibilidad.' }
    ],
  },
  {
    id: 'development',
    name: 'Fase 3: Desarrollo Iterativo',
    icon: Wrench,
    description: 'Escribir el código de la aplicación paso a paso, con especial atención a la inclusión y la construcción en partes pequeñas.',
    defaultTools: [
      { name: 'Flutter (Google)', description: 'Framework para apps multiplataforma (Android, iOS, Web) desde una sola base de código.' },
      { name: 'Android Studio / VS Code', description: 'Entornos de desarrollo integrados (IDE) para codificación.' },
      { name: 'Firebase (Google)', description: 'Bases de datos (Cloud Firestore), autenticación (Firebase Auth) y almacenamiento (Firebase Storage).' },
      { name: 'Google Cloud Functions', description: 'Lógica de negocio serverless para tareas específicas.' },
      { name: 'GitHub', description: 'Control de versiones del código, colaboración y Pull Requests.' },
      { name: 'Asistentes de Codificación con IA', description: 'Sugerencias de código, autocompletado inteligente y detección de errores.' },
      { name: 'AI Studio (Gemini API) / Gemini', description: 'Asistencia en depuración y sugerencias de implementación de características específicas.' }
    ],
  },
  {
    id: 'testing',
    name: 'Fase 4: Pruebas Inclusivas y Calidad Continua',
    icon: CheckCircle,
    description: 'Asegurar que la aplicación no solo funcione, sino que funcione bien para *todos*, revisando cada detalle.',
    defaultTools: [
      { name: 'Frameworks de Pruebas (Jest, JUnit, Flutter Driver, etc.)', description: 'Escritura de código para pruebas automatizadas.' },
      { name: 'GitHub Actions', description: 'Ejecución automática de pruebas y flujos de Integración Continua (CI).' },
      { name: 'Vertex AI (Google AI)', description: 'Generación de casos de prueba más inteligentes y detección de anomalías.' },
      { name: 'Firebase Test Lab (Google)', description: 'Pruebas automatizadas de UI en cientos de dispositivos reales y virtuales.' },
      { name: 'Lighthouse (Chrome DevTools)', description: 'Herramienta de auditoría de accesibilidad para web.' },
      { name: 'Accessibility Scanner (Android)', description: 'Herramienta de auditoría de accesibilidad para Android.' },
      { name: 'JMeter / Locust', description: 'Pruebas de rendimiento y carga para simular muchos usuarios.' },
      { name: 'Google Cloud Monitoring / Stackdriver', description: 'Monitoreo del rendimiento del backend en tiempo real.' },
      { name: 'Google Cloud Security Command Center', description: 'Identificación de vulnerabilidades en la infraestructura en la nube.' }
    ],
  },
  {
    id: 'deployment',
    name: 'Fase 5: Despliegue y Aprendizaje',
    icon: Rocket,
    description: 'Poner la aplicación a disposición de los usuarios y aprender constantemente de su comportamiento y rendimiento.',
    defaultTools: [
      { name: 'GitHub Actions (Despliegue Continuo - CD)', description: 'Automatización del proceso de lanzamiento de la aplicación.' },
      { name: 'Firebase Hosting (Google)', description: 'Alojamiento de sitios web estáticos o aplicaciones de una sola página.' },
      { name: 'Google Cloud Run / App Engine', description: 'Alojamiento de aplicaciones web y backends complejos.' },
      { name: 'Google Play Console (Android)', description: 'Gestión y publicación de aplicaciones Android en la tienda.' },
      { name: 'Apple App Store Connect (iOS)', description: 'Gestión y publicación de aplicaciones iOS en la tienda.' },
      { name: 'Google Analytics 4 (GA4)', description: 'Recopilación de datos de comportamiento de usuario y predicciones con IA.' },
      { name: 'Firebase Crashlytics (Google)', description: 'Recopilación de informes de errores y fallos en tiempo real para móviles.' },
      { name: 'Google Cloud Monitoring / Logging', description: 'Monitoreo del backend, rendimiento de servidores y análisis de registros.' }
    ],
  },
];

// Componente principal de la aplicación
const App = () => {
  const [projects, setProjects] = useState([]);
  const [currentView, setCurrentView] = useState('list');
  const [selectedProject, setSelectedProject] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [userId, setUserId] = useState('');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const initializeAuthAndFirestore = async () => {
      try {
        if (typeof __initial_auth_token !== 'undefined') {
          await signInWithCustomToken(auth, __initial_auth_token);
        } else {
          await signInAnonymously(auth);
        }
        setIsAuthReady(true);
      } catch (error) {
        console.error("Error al inicializar autenticación de Firebase:", error);
        setIsAuthReady(true);
      }
    };

    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setUserId(user.uid);
      } else {
        setUserId(crypto.randomUUID());
      }
      initializeAuthAndFirestore();
    });

    return () => unsubscribe();
  }, []);

  useEffect(() => {
    if (isAuthReady && userId) {
      const projectsCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/projects`);
      const unsubscribe = onSnapshot(projectsCollectionRef, (snapshot) => {
        const fetchedProjects = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
        setProjects(fetchedProjects);
        setLoading(false);
      }, (error) => {
        console.error("Error al cargar proyectos:", error);
        setLoading(false);
      });
      return () => unsubscribe();
    }
  }, [isAuthReady, userId]);

  // --- Funciones de Gestión de Proyectos ---
  const addProject = async (projectName, projectDescription, initialRequirements) => {
    if (!userId) {
      console.error("Usuario no autenticado. No se puede añadir el proyecto.");
      return;
    }
    try {
      const newProject = {
        name: projectName,
        description: projectDescription,
        phases: methodologyPhases.reduce((acc, phase) => ({
          ...acc,
          [phase.id]: { completed: false, notes: '', customTools: [] } // Add customTools per phase
        }), {}),
        // Initialize requirements backlog with initial requirements from the form
        requirementsBacklog: initialRequirements.map((req, index) => ({
          id: `req-${Date.now()}-${index}`,
          text: req,
          type: 'requirement', // Default type
          addedBy: 'user'
        })),
        versions: [], // No versions initially
        createdAt: new Date(),
        userId: userId
      };
      await addDoc(collection(db, `artifacts/${appId}/users/${userId}/projects`), newProject);
      setCurrentView('list');
    } catch (e) {
      console.error("Error al añadir proyecto: ", e);
    }
  };

  const updateProject = async (projectId, updates) => {
    if (!userId) {
      console.error("Usuario no autenticado. No se puede actualizar el proyecto.");
      return;
    }
    try {
      const projectRef = doc(db, `artifacts/${appId}/users/${userId}/projects`, projectId);
      await updateDoc(projectRef, updates);
    } catch (e) {
      console.error("Error al actualizar proyecto:", e);
    }
  };

  const deleteProject = async (projectId) => {
    if (!userId) {
      console.error("Usuario no autenticado. No se puede eliminar el proyecto.");
      return;
    }
    try {
      await deleteDoc(doc(db, `artifacts/${appId}/users/${userId}/projects`, projectId));
    } catch (e) {
      console.error("Error al eliminar proyecto: ", e);
    }
  };

  // --- Componentes de UI ---

  // Modal genérico para añadir o editar
  const Modal = ({ show, onClose, title, children }) => {
    if (!show) return null;
    return (
      <div className="fixed inset-0 bg-gray-600 bg-opacity-75 flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-lg shadow-xl w-full max-w-xl max-h-[90vh] overflow-y-auto">
          <div className="flex justify-between items-center p-4 border-b border-gray-200">
            <h3 className="text-xl font-semibold text-gray-800">{title}</h3>
            <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
              <XCircle className="w-6 h-6" />
            </button>
          </div>
          <div className="p-4">
            {children}
          </div>
        </div>
      </div>
    );
  };

  const ProjectForm = ({ onAddProject, onCancel }) => {
    const [name, setName] = useState('');
    const [description, setDescription] = useState('');
    const [requirementsInput, setRequirementsInput] = useState(''); // Comma-separated requirements

    const handleSubmit = (e) => {
      e.preventDefault();
      const initialRequirementsArray = requirementsInput.split(',').map(req => req.trim()).filter(req => req !== '');
      if (name.trim() && description.trim()) {
        onAddProject(name, description, initialRequirementsArray);
      }
    };

    return (
      <div className="bg-white p-6 rounded-lg shadow-md max-w-2xl mx-auto my-8 border border-gray-200">
        <h2 className="text-2xl font-bold mb-4 text-gray-800">Crear Nuevo Proyecto Inclusivo</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="projectName" className="block text-gray-700 text-sm font-bold mb-2">
              Nombre del Proyecto:
            </label>
            <input
              type="text"
              id="projectName"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="Ej: App de Salud para Adultos Mayores"
              required
            />
          </div>
          <div className="mb-4">
            <label htmlFor="projectDescription" className="block text-gray-700 text-sm font-bold mb-2">
              Descripción del Proyecto:
            </label>
            <textarea
              id="projectDescription"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500 h-24 resize-y"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Detalle los objetivos y el enfoque de inclusión del proyecto."
              required
            ></textarea>
          </div>
          <div className="mb-6">
            <label htmlFor="initialRequirements" className="block text-gray-700 text-sm font-bold mb-2">
              Requerimientos Iniciales (separados por coma):
            </label>
            <textarea
              id="initialRequirements"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500 h-20 resize-y"
              value={requirementsInput}
              onChange={(e) => setRequirementsInput(e.target.value)}
              placeholder="Ej: Navegación simple, Soporte para lector de pantalla, Texto adaptable"
            ></textarea>
          </div>
          <div className="flex items-center justify-between">
            <button
              type="submit"
              className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline transition duration-200 ease-in-out transform hover:scale-105"
            >
              Crear Proyecto
            </button>
            <button
              type="button"
              onClick={onCancel}
              className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline transition duration-200 ease-in-out transform hover:scale-105"
            >
              Cancelar
            </button>
          </div>
        </form>
      </div>
    );
  };

  const ProjectCard = ({ project, onViewDetail, onDelete }) => (
    <div className="bg-white p-6 rounded-lg shadow-md border border-gray-200 flex flex-col justify-between">
      <div>
        <h3 className="text-xl font-semibold mb-2 text-gray-800">{project.name}</h3>
        <p className="text-gray-600 mb-4 text-sm line-clamp-3">{project.description}</p>
      </div>
      <div className="flex justify-between items-center mt-4">
        <button
          onClick={() => onViewDetail(project)}
          className="bg-green-600 hover:bg-green-700 text-white text-sm font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline transition duration-200 ease-in-out transform hover:scale-105 flex items-center"
        >
          <Layout className="w-4 h-4 mr-2" /> Ver Detalles
        </button>
        <button
          onClick={() => onDelete(project.id)}
          className="bg-red-500 hover:bg-red-600 text-white text-sm font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline transition duration-200 ease-in-out transform hover:scale-105"
        >
          Eliminar
        </button>
      </div>
    </div>
  );

  const ProjectWorkflow = ({ project, onUpdateProject, onBackToList }) => {
    const [generatedInclusionIdeas, setGeneratedInclusionIdeas] = useState('');
    const [isGeneratingIdeas, setIsGeneratingIdeas] = useState(false);
    const [summarizingPhaseId, setSummarizingPhaseId] = useState(null);
    const [newToolName, setNewToolName] = useState('');
    const [newToolDescription, setNewToolDescription] = useState('');
    const [addingToolToPhaseId, setAddingToolToPhaseId] = useState(null); // Which phase we are adding a tool to

    const [showAddRequirementModal, setShowAddRequirementModal] = useState(false);
    const [newRequirementText, setNewRequirementText] = useState('');

    const [showVersionModal, setShowVersionModal] = useState(false);
    const [currentVersionName, setCurrentVersionName] = useState('');
    const [selectedReqsForVersion, setSelectedReqsForVersion] = useState({}); // { reqId: boolean }

    // Helper to get combined default and custom tools for a phase
    const getPhaseTools = (phaseId) => {
      const defaultPhase = methodologyPhases.find(p => p.id === phaseId);
      const customTools = project.phases[phaseId]?.customTools || [];
      return [...(defaultPhase ? defaultPhase.defaultTools : []), ...customTools];
    };

    // Helper to get status of a requirement across all versions
    const getRequirementStatus = (reqId) => {
        let status = 'Nunca considerado';
        let versionsConsidered = [];
        let isCompletedInAnyVersion = false;

        project.versions.forEach(version => {
            version.items.forEach(item => {
                if (item.reqId === reqId) {
                    versionsConsidered.push(version.name);
                    if (item.status === 'completed') {
                        isCompletedInAnyVersion = true;
                    }
                }
            });
        });

        if (isCompletedInAnyVersion) {
            status = `Completado en ${versionsConsidered.join(', ')}`;
        } else if (versionsConsidered.length > 0) {
            status = `En consideración en ${versionsConsidered.join(', ')}`;
        }
        return status;
    };


    const generateInclusionIdeas = async () => {
        setIsGeneratingIdeas(true);
        setGeneratedInclusionIdeas('');
        try {
            const prompt = `Dada la siguiente descripción de un proyecto, genera 5 ideas concretas sobre cómo hacerlo más inclusivo, considerando diversas capacidades y edades. Enfócate en aspectos de diseño, funcionalidad y accesibilidad. Presenta cada idea en un punto separado:\n\nDescripción del Proyecto: ${project.description}`;
            const chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
            const payload = { contents: chatHistory };
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            const result = await response.json();

            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                const text = result.candidates[0].content.parts[0].text;
                setGeneratedInclusionIdeas(text);
            } else {
                setGeneratedInclusionIdeas("No se pudieron generar ideas en este momento. Intenta de nuevo más tarde.");
            }
        } catch (error) {
            console.error("Error al generar ideas de inclusión:", error);
            setGeneratedInclusionIdeas("Error al conectar con la IA. Por favor, revisa tu conexión.");
        } finally {
            setIsGeneratingIdeas(false);
        }
    };

    const addGeneratedIdeaToBacklog = async (ideaText) => {
        const newReqId = `req-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        const updatedBacklog = [
            ...project.requirementsBacklog,
            { id: newReqId, text: ideaText, type: 'inclusion_idea', addedBy: 'ai' }
        ];
        await onUpdateProject(project.id, { requirementsBacklog: updatedBacklog });
        setGeneratedInclusionIdeas(''); // Clear ideas after adding
    };

    const summarizePhaseNotes = async (projectId, phaseId, currentNotes) => {
        if (!currentNotes.trim()) return;
        setSummarizingPhaseId(phaseId);
        try {
            const prompt = `Resume el siguiente texto en no más de 4-5 oraciones clave. Asegúrate de capturar los puntos más importantes:\n\nNotas a resumir:\n${currentNotes}`;
            const chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
            const payload = { contents: chatHistory };
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            const result = await response.json();

            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                const summarizedText = result.candidates[0].content.parts[0].text;
                await onUpdateProject(project.id, {
                    [`phases.${phaseId}.notes`]: summarizedText
                });
            } else {
                console.warn("No se pudo generar el resumen para la fase:", phaseId);
            }
        } catch (error) {
            console.error("Error al resumir notas de la fase:", error);
        } finally {
            setSummarizingPhaseId(null);
        }
    };

    const addCustomTool = async (phaseId) => {
      if (newToolName.trim() && newToolDescription.trim()) {
        const currentCustomTools = project.phases[phaseId]?.customTools || [];
        const updatedCustomTools = [...currentCustomTools, { name: newToolName, description: newToolDescription }];
        await onUpdateProject(project.id, {
          [`phases.${phaseId}.customTools`]: updatedCustomTools
        });
        setNewToolName('');
        setNewToolDescription('');
        setAddingToolToPhaseId(null);
      }
    };

    const deleteCustomTool = async (phaseId, toolIndex) => {
        const currentCustomTools = project.phases[phaseId]?.customTools || [];
        const updatedCustomTools = currentCustomTools.filter((_, idx) => idx !== toolIndex);
        await onUpdateProject(project.id, {
            [`phases.${phaseId}.customTools`]: updatedCustomTools
        });
    };

    const addRequirementToBacklog = async () => {
        if (newRequirementText.trim()) {
            const newReqId = `req-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
            const updatedBacklog = [
                ...project.requirementsBacklog,
                { id: newReqId, text: newRequirementText.trim(), type: 'user_defined', addedBy: 'user' }
            ];
            await onUpdateProject(project.id, { requirementsBacklog: updatedBacklog });
            setNewRequirementText('');
            setShowAddRequirementModal(false);
        }
    };

    const createNewVersion = async () => {
        if (currentVersionName.trim()) {
            const newVersionId = `v-${Date.now()}`;
            const versionItems = Object.keys(selectedReqsForVersion)
                .filter(reqId => selectedReqsForVersion[reqId])
                .map(reqId => ({ reqId, status: 'pending' })); // Default status for new items in version

            const updatedVersions = [
                ...project.versions,
                {
                    id: newVersionId,
                    name: currentVersionName.trim(),
                    createdAt: new Date(),
                    items: versionItems
                }
            ];
            await onUpdateProject(project.id, { versions: updatedVersions });
            setShowVersionModal(false);
            setCurrentVersionName('');
            setSelectedReqsForVersion({});
        }
    };

    const updateVersionStatus = async (versionId, reqId, newStatus) => {
        const updatedVersions = project.versions.map(version => {
            if (version.id === versionId) {
                const updatedItems = version.items.map(item =>
                    item.reqId === reqId ? { ...item, status: newStatus } : item
                );
                return { ...version, items: updatedItems };
            }
            return version;
        });
        await onUpdateProject(project.id, { versions: updatedVersions });
    };

    return (
      <div className="bg-white p-6 rounded-lg shadow-md max-w-4xl mx-auto my-8 border border-gray-200">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-3xl font-bold text-gray-800">{project.name}</h2>
          <button
            onClick={onBackToList}
            className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-lg focus:outline-none focus:shadow-outline transition duration-200 ease-in-out transform hover:scale-105 flex items-center"
          >
            <Home className="w-4 h-4 mr-2" /> Volver a Proyectos
          </button>
        </div>
        <p className="text-gray-600 mb-6 text-base">{project.description}</p>

        {/* Botón para generar ideas de inclusión con IA */}
        <div className="mb-6 flex justify-center">
          <button
            onClick={generateInclusionIdeas}
            className="bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-lg focus:outline-none focus:shadow-outline transition duration-200 ease-in-out transform hover:scale-105 flex items-center text-lg"
            disabled={isGeneratingIdeas}
          >
            {isGeneratingIdeas ? 'Generando ideas...' : 'Generar Ideas de Inclusión ✨'}
          </button>
        </div>

        {/* Área para mostrar las ideas generadas */}
        {isGeneratingIdeas && (
          <div className="text-center my-4 text-blue-600">
            <div className="animate-spin ease-linear rounded-full border-4 border-t-4 border-blue-500 h-12 w-12 mb-4 mx-auto"></div>
            Generando ideas inclusivas con IA...
          </div>
        )}

        {generatedInclusionIdeas && !isGeneratingIdeas && (
          <div className="bg-blue-50 p-5 rounded-lg border border-blue-200 mb-6">
            <h4 className="text-lg font-semibold text-blue-800 mb-3">Ideas Generadas por IA:</h4>
            <div className="space-y-2">
                {generatedInclusionIdeas.split('\n').filter(line => line.trim() !== '').map((idea, idx) => (
                    <div key={idx} className="flex items-center justify-between bg-blue-100 p-2 rounded-md">
                        <p className="text-gray-700 flex-grow">{idea.replace(/^- /, '')}</p> {/* Remove markdown list dash */}
                        <button
                            onClick={() => addGeneratedIdeaToBacklog(idea.replace(/^- /, ''))}
                            className="ml-4 bg-blue-600 hover:bg-blue-700 text-white text-xs font-bold py-1 px-3 rounded-md transition duration-200"
                        >
                            Añadir al Backlog
                        </button>
                    </div>
                ))}
            </div>
          </div>
        )}

        {/* Sección de Backlog de Requerimientos */}
        <div className="bg-gray-50 p-6 rounded-lg border border-gray-200 mb-6">
            <div className="flex justify-between items-center mb-4">
                <h3 className="text-2xl font-semibold text-gray-800 flex items-center">
                    <ListChecks className="w-6 h-6 mr-2 text-gray-600" /> Backlog de Requerimientos
                </h3>
                <button
                    onClick={() => setShowAddRequirementModal(true)}
                    className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-lg flex items-center transition duration-200 ease-in-out transform hover:scale-105"
                >
                    <PlusCircle className="w-4 h-4 mr-2" /> Añadir Requerimiento
                </button>
            </div>
            {project.requirementsBacklog.length === 0 ? (
                <p className="text-gray-600 italic">No hay requerimientos en el backlog. Añade algunos.</p>
            ) : (
                <ul className="space-y-2">
                    {project.requirementsBacklog.map(req => (
                        <li key={req.id} className="bg-white p-3 rounded-md shadow-sm border border-gray-100">
                            <div className="flex justify-between items-center">
                                <p className="text-gray-800 text-sm">{req.text} <span className="text-xs text-gray-500 ml-2">({req.addedBy === 'ai' ? 'Idea IA' : 'Usuario'})</span></p>
                                <span className="text-xs font-semibold text-blue-700 bg-blue-100 px-2 py-1 rounded-full">{getRequirementStatus(req.id)}</span>
                            </div>
                        </li>
                    ))}
                </ul>
            )}
        </div>

        {/* Modal para añadir requerimiento */}
        <Modal show={showAddRequirementModal} onClose={() => setShowAddRequirementModal(false)} title="Añadir Nuevo Requerimiento">
            <textarea
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500 h-24 resize-y mb-4"
                placeholder="Describe el nuevo requerimiento..."
                value={newRequirementText}
                onChange={(e) => setNewRequirementText(e.target.value)}
            ></textarea>
            <button
                onClick={addRequirementToBacklog}
                className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg w-full transition duration-200"
            >
                Guardar Requerimiento
            </button>
        </Modal>

        {/* Sección de Versiones */}
        <div className="bg-gray-50 p-6 rounded-lg border border-gray-200 mb-6">
            <div className="flex justify-between items-center mb-4">
                <h3 className="text-2xl font-semibold text-gray-800 flex items-center">
                    <GitBranch className="w-6 h-6 mr-2 text-gray-600" /> Versiones del Proyecto
                </h3>
                <button
                    onClick={() => {
                        setCurrentVersionName('');
                        setSelectedReqsForVersion({}); // Clear selections for new version
                        setShowVersionModal(true);
                    }}
                    className="bg-teal-600 hover:bg-teal-700 text-white font-bold py-2 px-4 rounded-lg flex items-center transition duration-200 ease-in-out transform hover:scale-105"
                >
                    <PlusCircle className="w-4 h-4 mr-2" /> Crear Nueva Versión
                </button>
            </div>
            {project.versions.length === 0 ? (
                <p className="text-gray-600 italic">No hay versiones creadas. Crea una para organizar tu desarrollo.</p>
            ) : (
                <div className="space-y-4">
                    {project.versions.map(version => (
                        <div key={version.id} className="bg-white p-4 rounded-md shadow-sm border border-gray-100">
                            <h4 className="font-bold text-lg text-gray-800">{version.name}</h4>
                            <p className="text-gray-500 text-sm mb-2">Fecha: {new Date(version.createdAt.toDate()).toLocaleDateString()}</p>
                            <h5 className="font-semibold text-gray-700 mb-1">Items de esta versión:</h5>
                            <ul className="list-disc list-inside text-sm text-gray-600">
                                {version.items.length === 0 ? (
                                    <li>No hay ítems seleccionados para esta versión.</li>
                                ) : (
                                    version.items.map(item => {
                                        const req = project.requirementsBacklog.find(r => r.id === item.reqId);
                                        return req ? (
                                            <li key={item.reqId} className="flex items-center justify-between">
                                                <span>{req.text}</span>
                                                <select
                                                    value={item.status}
                                                    onChange={(e) => updateVersionStatus(version.id, item.reqId, e.target.value)}
                                                    className="ml-2 px-2 py-1 text-xs rounded border border-gray-300 bg-white"
                                                >
                                                    <option value="pending">Pendiente</option>
                                                    <option value="in_progress">En Progreso</option>
                                                    <option value="completed">Completado</option>
                                                </select>
                                            </li>
                                        ) : null;
                                    })
                                )}
                            </ul>
                        </div>
                    ))}
                </div>
            )}
        </div>

        {/* Modal para crear/editar versión */}
        <Modal show={showVersionModal} onClose={() => setShowVersionModal(false)} title="Crear Nueva Versión">
            <div className="mb-4">
                <label htmlFor="versionName" className="block text-gray-700 text-sm font-bold mb-2">
                    Nombre de la Versión:
                </label>
                <input
                    type="text"
                    id="versionName"
                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline mb-4"
                    value={currentVersionName}
                    onChange={(e) => setCurrentVersionName(e.target.value)}
                    placeholder="Ej: Versión 1.0 - MVP Inicial"
                />
            </div>
            <h4 className="text-md font-semibold text-gray-700 mb-3">Seleccionar Requerimientos para esta Versión:</h4>
            {project.requirementsBacklog.length === 0 ? (
                <p className="text-gray-600 italic">No hay requerimientos en el backlog para seleccionar.</p>
            ) : (
                <div className="space-y-2 max-h-60 overflow-y-auto border p-3 rounded-md">
                    {project.requirementsBacklog.map(req => (
                        <div key={req.id} className="flex items-center">
                            <input
                                type="checkbox"
                                id={`req-version-${req.id}`}
                                className="form-checkbox h-4 w-4 text-blue-600 rounded"
                                checked={!!selectedReqsForVersion[req.id]}
                                onChange={(e) => setSelectedReqsForVersion({
                                    ...selectedReqsForVersion,
                                    [req.id]: e.target.checked
                                })}
                            />
                            <label htmlFor={`req-version-${req.id}`} className="ml-2 text-gray-700 text-sm">{req.text}</label>
                        </div>
                    ))}
                </div>
            )}
            <button
                onClick={createNewVersion}
                className="bg-teal-600 hover:bg-teal-700 text-white font-bold py-2 px-4 rounded-lg w-full mt-6 transition duration-200"
            >
                Guardar Versión
            </button>
        </Modal>


        {/* Sección de Fases de la Metodología */}
        <h3 className="text-2xl font-semibold mb-4 text-gray-800">Ciclo de Desarrollo Inclusivo</h3>
        <div className="space-y-6">
          {methodologyPhases.map((phase) => {
            const phaseData = project.phases[phase.id] || { completed: false, notes: '', customTools: [] };
            const IconComponent = phase.icon;

            return (
              <div key={phase.id} className="border p-5 rounded-lg bg-gray-50 border-gray-200">
                <div className="flex items-center mb-3">
                  <IconComponent className={`w-7 h-7 mr-3 ${phaseData.completed ? 'text-green-600' : 'text-blue-600'}`} />
                  <h4 className="text-xl font-semibold text-gray-800 flex-grow">{phase.name}</h4>
                  <label className="flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      className="form-checkbox h-5 w-5 text-blue-600 rounded"
                      checked={phaseData.completed}
                      onChange={(e) => onUpdateProject(project.id, { [`phases.${phase.id}.completed`]: e.target.checked })}
                    />
                    <span className="ml-2 text-gray-700 text-sm">{phaseData.completed ? 'Completado' : 'Marcar como completado'}</span>
                  </label>
                </div>
                <p className="text-gray-700 text-sm mb-4">{phase.description}</p>

                <div className="mb-4">
                  <h5 className="font-semibold text-gray-700 mb-2 text-md">Herramientas y Potenciadores con IA:</h5>
                  <ul className="list-disc list-inside text-sm text-gray-600 space-y-1">
                    {getPhaseTools(phase.id).map((tool, idx) => (
                      <li key={idx} className="flex items-center justify-between">
                        <span><span className="font-medium text-gray-700">{tool.name}:</span> {tool.description}</span>
                        {/* Only show delete for custom tools, not default ones */}
                        {phaseData.customTools && phaseData.customTools.some(ct => ct.name === tool.name && ct.description === tool.description) && (
                            <button
                                onClick={() => deleteCustomTool(phase.id, idx)} // idx might need adjustment if default tools exist
                                className="ml-2 text-red-500 hover:text-red-700 text-xs"
                                title="Eliminar herramienta personalizada"
                            >
                                <XCircle className="w-4 h-4" />
                            </button>
                        )}
                      </li>
                    ))}
                  </ul>
                  {/* Form para añadir herramienta personalizada */}
                  {addingToolToPhaseId === phase.id ? (
                    <div className="mt-4 p-3 border border-gray-300 rounded-md bg-white">
                        <input
                            type="text"
                            placeholder="Nombre de la herramienta"
                            className="w-full p-2 border rounded-md mb-2 text-sm"
                            value={newToolName}
                            onChange={(e) => setNewToolName(e.target.value)}
                        />
                        <input
                            type="text"
                            placeholder="Descripción de la herramienta"
                            className="w-full p-2 border rounded-md mb-2 text-sm"
                            value={newToolDescription}
                            onChange={(e) => setNewToolDescription(e.target.value)}
                        />
                        <div className="flex justify-end space-x-2">
                            <button
                                onClick={() => addCustomTool(phase.id)}
                                className="bg-blue-500 hover:bg-blue-600 text-white text-sm py-1 px-3 rounded-lg"
                            >
                                Añadir
                            </button>
                            <button
                                onClick={() => {setAddingToolToPhaseId(null); setNewToolName(''); setNewToolDescription('');}}
                                className="bg-gray-300 hover:bg-gray-400 text-gray-800 text-sm py-1 px-3 rounded-lg"
                            >
                                Cancelar
                            </button>
                        </div>
                    </div>
                  ) : (
                    <button
                        onClick={() => setAddingToolToPhaseId(phase.id)}
                        className="mt-4 bg-gray-200 hover:bg-gray-300 text-gray-800 text-sm font-bold py-1 px-3 rounded-lg"
                    >
                        Añadir Herramienta Propia
                    </button>
                  )}
                </div>

                <div>
                  <label htmlFor={`notes-${phase.id}`} className="block text-gray-700 text-sm font-bold mb-2">
                    Notas del Proyecto para esta Fase:
                  </label>
                  <textarea
                    id={`notes-${phase.id}`}
                    className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-blue-500 h-20 resize-y mb-2"
                    value={phaseData.notes}
                    onChange={(e) => onUpdateProject(project.id, { [`phases.${phase.id}.notes`]: e.target.value })}
                    placeholder="Añade tus notas, aprendizajes o desafíos para esta fase específica del proyecto..."
                  ></textarea>
                  <button
                    onClick={() => summarizePhaseNotes(project.id, phase.id, phaseData.notes)}
                    className="bg-gray-200 hover:bg-gray-300 text-gray-800 text-sm font-bold py-1 px-3 rounded-lg focus:outline-none focus:shadow-outline transition duration-200 ease-in-out transform hover:scale-105 flex items-center"
                    disabled={summarizingPhaseId === phase.id || phaseData.notes.trim() === ''}
                  >
                    {summarizingPhaseId === phase.id ? 'Resumiendo...' : 'Resumir Notas ✨'}
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  // --- Renderizado principal de la aplicación ---
  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 text-gray-700">
        Cargando proyectos...
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 font-sans text-gray-900">
      <header className="bg-gradient-to-r from-blue-600 to-purple-700 text-white py-6 shadow-lg">
        <div className="container mx-auto px-4 flex flex-col sm:flex-row justify-between items-center">
          <h1 className="text-3xl font-extrabold mb-4 sm:mb-0">
            Metodología Ágil para Proyectos Inclusivos
          </h1>
          <div className="flex items-center space-x-4">
            <span className="text-sm">ID de Usuario: {userId.substring(0, 8)}...</span>
            <button
              onClick={() => setCurrentView('list')}
              className="bg-blue-700 hover:bg-blue-800 text-white font-bold py-2 px-4 rounded-lg flex items-center transition duration-200 ease-in-out transform hover:scale-105"
            >
              <Home className="w-4 h-4 mr-2" /> Proyectos
            </button>
            <button
              onClick={() => setCurrentView('create')}
              className="bg-blue-700 hover:bg-blue-800 text-white font-bold py-2 px-4 rounded-lg flex items-center transition duration-200 ease-in-out transform hover:scale-105"
            >
              <PlusCircle className="w-4 h-4 mr-2" /> Nuevo Proyecto
            </button>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 py-8">
        {currentView === 'list' && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {projects.length === 0 ? (
              <div className="md:col-span-3 text-center p-8 bg-white rounded-lg shadow-md border border-gray-200">
                <p className="text-xl text-gray-700 mb-4">No hay proyectos creados aún.</p>
                <button
                  onClick={() => setCurrentView('create')}
                  className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg flex items-center justify-center mx-auto transition duration-200 ease-in-out transform hover:scale-105"
                >
                  <PlusCircle className="w-5 h-5 mr-2" /> ¡Crea tu primer proyecto!
                </button>
              </div>
            ) : (
              projects.map(project => (
                <ProjectCard
                  key={project.id}
                  project={project}
                  onViewDetail={(projectToView) => {
                    setSelectedProject(projectToView);
                    setCurrentView('detail');
                  }}
                  onDelete={deleteProject}
                />
              ))
            )}
          </div>
        )}

        {currentView === 'create' && (
          <ProjectForm
            onAddProject={addProject}
            onCancel={() => setCurrentView('list')}
          />
        )}

        {currentView === 'detail' && selectedProject && (
          <ProjectWorkflow
            project={selectedProject}
            onUpdateProject={updateProject} // Changed from onUpdatePhase to a more general update function
            onBackToList={() => {
              setCurrentView('list');
              setSelectedProject(null);
            }}
          />
        )}
      </main>

      <footer className="bg-gray-800 text-white py-4 mt-8">
        <div className="container mx-auto px-4 text-center text-sm">
          <p>&copy; {new Date().getFullYear()} Metodología Ágil para Proyectos Inclusivos. Potenciado por Google AI y Firebase.</p>
          <p className="mt-2 text-xs">
            Esta aplicación demuestra un ciclo de desarrollo ágil y cómo integrar herramientas de Google y IA.
            Diseñada para la eficiencia y la creación de soluciones inclusivas.
          </p>
        </div>
      </footer>
    </div>
  );
};

export default App;
