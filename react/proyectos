import React, { useState, useEffect, createContext, useContext, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, signOut } from 'firebase/auth';
import { getFirestore, doc, setDoc, deleteDoc, onSnapshot, collection, query, addDoc } from 'firebase/firestore';

// --- CONTEXTO DE FIREBASE ---
// Contexto para compartir la instancia de Firebase y el ID de usuario a través de la aplicación.
const FirebaseContext = createContext(null);

// --- HOOKS PERSONALIZADOS ---
// Hook para una fácil utilización del contexto de Firebase.
const useFirebase = () => useContext(FirebaseContext);

// --- COMPONENTES DE UI ---

/**
 * Componente para Copiar Texto
 * @param {{textToCopy: string}} props
 */
const CopyButton = ({ textToCopy }) => {
    const [copied, setCopied] = useState(false);

    const handleCopy = () => {
        if (!textToCopy) return;

        const textArea = document.createElement("textarea");
        textArea.value = textToCopy;
        textArea.style.position = "fixed"; // Evita que la pantalla se desplace
        textArea.style.left = "-9999px";
        document.body.appendChild(textArea);
        textArea.select();
        try {
            document.execCommand('copy');
            setCopied(true);
            setTimeout(() => setCopied(false), 2000); // Reset after 2 seconds
        } catch (err) {
            console.error('Error al copiar texto: ', err);
        }
        document.body.removeChild(textArea);
    };

    return (
        <button
            onClick={handleCopy}
            className={`absolute top-2 right-2 p-1.5 rounded-md text-gray-500 hover:text-indigo-600 hover:bg-indigo-100 transition-all duration-200 ${copied ? 'bg-green-100 text-green-700' : ''}`}
            aria-label="Copiar texto"
        >
            {copied ? (
                 <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                 </svg>
            ) : (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
            )}
        </button>
    );
};


/**
 * Componente Modal de Confirmación
 * Un modal reutilizable para confirmar acciones como eliminar un proyecto.
 * @param {object} props - Propiedades del componente.
 * @param {boolean} props.isOpen - Controla si el modal está visible.
 * @param {string} props.title - El título del modal.
 * @param {string} props.message - El mensaje de confirmación.
 * @param {function} props.onConfirm - Función a ejecutar al confirmar.
 * @param {function} props.onCancel - Función a ejecutar al cancelar.
 */
const ConfirmationModal = ({ isOpen, title, message, onConfirm, onCancel }) => {
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4">
            <div className="bg-white rounded-2xl shadow-2xl p-8 max-w-sm w-full mx-auto">
                <h3 className="text-2xl font-bold text-gray-800 mb-4">{title}</h3>
                <p className="text-gray-600 mb-6">{message}</p>
                <div className="flex justify-end space-x-4">
                    <button
                        onClick={onCancel}
                        className="px-6 py-2 rounded-lg text-gray-700 bg-gray-200 hover:bg-gray-300 transition-colors duration-300 font-semibold"
                    >
                        Cancelar
                    </button>
                    <button
                        onClick={onConfirm}
                        className="px-6 py-2 rounded-lg text-white bg-red-500 hover:bg-red-600 transition-colors duration-300 font-semibold"
                    >
                        Confirmar
                    </button>
                </div>
            </div>
        </div>
    );
};


/**
 * Icono de Carga (Spinner)
 * Un componente visual para indicar que una operación está en curso.
 */
const LoadingSpinner = () => (
    <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
);


// --- ESTRUCTURA DE DATOS ---
// Estructura base para el plan de trabajo de cada nuevo proyecto con lenguaje amigable.
const planDeTrabajoBase = [
    {
        name: "Fase 1: Entendiendo el Dolor o la Necesidad",
        description: "Aquí nos ponemos en los zapatos de las personas. ¿Qué problema o 'dolor' queremos solucionarles? Es el corazón de nuestro proyecto.",
        steps: [
            { name: "Escuchar a las Personas", description: "Conversamos y observamos para entender de verdad las dificultades y necesidades de nuestros futuros clientes." },
            { name: "Crear el Perfil del Cliente Ideal", description: "Imaginamos en detalle a quién ayudamos. Esto nos permite crear una solución que realmente le sirva y le guste." },
            { name: "Investigar a la Competencia", description: "Miramos qué otras soluciones existen. Aprendemos de sus aciertos y errores para ofrecer algo mejor y diferente." },
            { name: "Definir Nuestra Solución Única", description: "Con todo lo aprendido, definimos claramente qué vamos a ofrecer y por qué nuestra solución es especial." },
            { name: "Planear el Esqueleto de la Aplicación", description: "Dibujamos un mapa sencillo de cómo funcionará nuestra aplicación o servicio. Es la base para empezar a construir." },
        ]
    },
    {
        name: "Fase 2: Creando la Primera Idea (Prototipo)",
        description: "Transformamos la idea en algo que se puede ver y tocar. Creamos una primera versión sencilla (Producto Mínimo Viable) para probar si vamos por buen camino.",
        steps: [
            { name: "Diseñar un Borrador Interactivo", description: "Creamos un modelo de nuestra app para que las personas puedan 'jugar' con él y darnos su opinión antes de construirla." },
            { name: "Probar el Borrador con Clientes", description: "Mostramos nuestro prototipo a clientes reales para ver si es fácil de usar y si realmente soluciona su problema." },
            { name: "Crear el Primer Producto Viable (MVP)", description: "Con las opiniones recogidas, construimos la versión más simple pero funcional de nuestro producto para lanzarla al mercado." },
            { name: "Generar Nombres, Slogans y Textos Atractivos", description: "Usamos la IA para crear los primeros diseños visuales, nombres, y textos que usaremos para presentar nuestro proyecto de una forma profesional." },
        ]
    },
    {
        name: "Fase 3: Construyendo la Solución Completa",
        description: "Ahora que sabemos que la idea funciona, la construimos de verdad. Hacemos que sea segura, fácil de usar y que funcione bien para todos.",
        steps: [
            { name: "Desarrollar la Aplicación Final", description: "Programamos y construimos la versión completa de nuestro producto, añadiendo todas las funciones importantes." },
            { name: "Asegurar la Calidad y Facilidad de Uso", description: "Realizamos pruebas exhaustivas para asegurarnos de que todo funcione perfectamente y sea muy fácil de usar para cualquier persona." },
            { name: "Garantizar la Seguridad de los Datos", description: "Implementamos medidas de seguridad para proteger la información de nuestros clientes. La confianza es clave." },
            { name: "Preparar el Lanzamiento Oficial", description: "Dejamos todo listo para que el público general pueda acceder y usar nuestro producto. ¡El gran día se acerca!" },
        ]
    },
    {
        name: "Fase 4: Dando a Conocer y Generando Ingresos",
        description: "Llegó el momento de mostrar nuestro proyecto al mundo. Pensamos en cómo contar nuestra historia en redes sociales y cómo podemos empezar a ganar dinero.",
        steps: [
            { name: "Crear una Estrategia para Redes Sociales", description: "Planificamos qué contenido vamos a compartir en redes (Facebook, Instagram, etc.) para atraer a nuestros clientes ideales." },
            { name: "Lanzar el Producto y Medir Resultados", description: "Publicamos nuestro producto y observamos cómo lo usan las personas. Esto nos da pistas para mejorarlo continuamente." },
            { name: "Escuchar Opiniones y Mejorar", description: "Basados en el feedback de los usuarios, hacemos ajustes y lanzamos nuevas versiones de nuestro producto para que sea cada vez mejor." },
            { name: "Definir Cómo Ganar Dinero", description: "Exploramos diferentes formas de monetizar nuestro trabajo, ya sea por suscripción, venta directa, o servicios adicionales." },
        ]
    }
];

// --- COMPONENTES PRINCIPALES ---

/**
 * Componente Dashboard
 * Muestra la lista de proyectos del usuario y permite crear nuevos.
 */
const Dashboard = () => {
    const { db, userId } = useFirebase();
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

    const [projects, setProjects] = useState([]);
    const [newProjectName, setNewProjectName] = useState('');
    const [selectedProject, setSelectedProject] = useState(null);
    const [message, setMessage] = useState('');
    const [isLoading, setIsLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [projectToDelete, setProjectToDelete] = useState(null);


    // Cargar proyectos del usuario desde Firestore en tiempo real.
    useEffect(() => {
        if (!db || !userId) return;

        setIsLoading(true);
        const projectsColRef = collection(db, `artifacts/${appId}/users/${userId}/projects`);
        const q = query(projectsColRef);

        const unsubscribe = onSnapshot(q, (snapshot) => {
            const projectsData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setProjects(projectsData);
            setIsLoading(false);
        }, (error) => {
            console.error("Error al obtener proyectos:", error);
            setMessage("Error al cargar tus proyectos.");
            setIsLoading(false);
        });

        // Limpiar el listener al desmontar el componente para evitar fugas de memoria.
        return () => unsubscribe();
    }, [db, userId, appId]);

    // Crear un nuevo proyecto en Firestore.
    const handleCreateProject = async () => {
        if (!db || !userId || !newProjectName.trim()) {
            setMessage("Por favor, ingresa un nombre para el proyecto.");
            return;
        }

        try {
            const projectsColRef = collection(db, `artifacts/${appId}/users/${userId}/projects`);
            const projectData = {
                name: newProjectName.trim(),
                description: `Proyecto generado el ${new Date().toLocaleDateString()}`,
                userId: userId,
                phases: planDeTrabajoBase.map(phase => ({
                    ...phase,
                    steps: phase.steps.map(step => ({ ...step, status: 'pending', aiInput: '', aiOutput: '' }))
                })),
                currentPhaseIndex: 0,
                currentStepIndex: 0,
                createdAt: new Date(),
            };
            await addDoc(projectsColRef, projectData);
            setNewProjectName('');
            setMessage("Proyecto creado con éxito.");
            setTimeout(() => setMessage(''), 3000); // Limpiar mensaje después de 3 segundos
        } catch (error) {
            console.error("Error al crear el proyecto:", error);
            setMessage("Error al crear el proyecto.");
        }
    };

    // Abre el modal de confirmación para eliminar un proyecto.
    const openDeleteModal = (projectId) => {
        setProjectToDelete(projectId);
        setIsModalOpen(true);
    };
    
    // Cierra el modal de confirmación.
    const closeDeleteModal = () => {
        setProjectToDelete(null);
        setIsModalOpen(false);
    };

    // Elimina un proyecto de Firestore.
    const handleDeleteProject = async () => {
        if (!projectToDelete) return;
        
        try {
            const projectDocRef = doc(db, `artifacts/${appId}/users/${userId}/projects`, projectToDelete);
            await deleteDoc(projectDocRef);
            setMessage("Proyecto eliminado con éxito.");
            if (selectedProject && selectedProject.id === projectToDelete) {
                setSelectedProject(null);
            }
        } catch (error) {
            console.error("Error al eliminar el proyecto:", error);
            setMessage("Error al eliminar el proyecto.");
        } finally {
            closeDeleteModal();
            setTimeout(() => setMessage(''), 3000);
        }
    };

    if (selectedProject) {
        return (
            <ProjectView
                project={selectedProject}
                onBack={() => setSelectedProject(null)}
                onUpdateProject={setSelectedProject} // Actualiza la vista del proyecto en tiempo real
            />
        );
    }

    return (
        <>
            <ConfirmationModal
                isOpen={isModalOpen}
                title="Eliminar Proyecto"
                message="¿Estás seguro de que quieres eliminar este proyecto? Esta acción no se puede deshacer."
                onConfirm={handleDeleteProject}
                onCancel={closeDeleteModal}
            />
            <div className="bg-white p-6 sm:p-8 rounded-xl shadow-lg animate-fade-in">
                <h2 className="text-3xl font-bold text-indigo-800 mb-6">Tus Proyectos</h2>
    
                {message && (
                    <div className="bg-blue-100 text-blue-800 p-3 rounded-lg mb-4 text-center transition-opacity duration-300">
                        {message}
                    </div>
                )}
    
                <div className="mb-8 flex flex-col sm:flex-row gap-4">
                    <input
                        type="text"
                        placeholder="Nombre del nuevo proyecto"
                        value={newProjectName}
                        onChange={(e) => setNewProjectName(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && handleCreateProject()}
                        className="flex-grow p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-shadow"
                    />
                    <button
                        onClick={handleCreateProject}
                        className="px-6 py-3 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 transition-all duration-300 ease-in-out transform hover:scale-105"
                    >
                        Crear Nuevo Proyecto
                    </button>
                </div>
    
                {isLoading ? (
                     <p className="text-gray-600 text-center py-10">Cargando proyectos...</p>
                ) : projects.length === 0 ? (
                    <p className="text-gray-600 text-center py-10">No tienes proyectos. ¡Crea uno para empezar!</p>
                ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {projects.map((project) => {
                            const totalSteps = project.phases.reduce((acc, phase) => acc + phase.steps.length, 0);
                            const completedSteps = project.phases.reduce((acc, phase) => acc + phase.steps.filter(step => step.status === 'completed').length, 0);
                            const progress = totalSteps > 0 ? (completedSteps / totalSteps) * 100 : 0;

                            return (
                                <div
                                    key={project.id}
                                    className="bg-gray-50 border border-gray-200 rounded-xl p-6 shadow-sm flex flex-col justify-between hover:shadow-lg hover:-translate-y-1 transition-all duration-300 ease-in-out"
                                >
                                    <div>
                                        <h3 className="text-xl font-semibold text-indigo-700 mb-2 truncate">{project.name}</h3>
                                        <p className="text-gray-600 text-sm mb-4 h-10">{project.description}</p>
                                        <div className="w-full bg-gray-200 rounded-full h-2.5 mb-2">
                                            <div className="bg-green-500 h-2.5 rounded-full" style={{ width: `${progress}%` }}></div>
                                        </div>
                                        <p className="text-gray-500 text-xs mb-4 text-right">{progress.toFixed(1)}% Completado</p>
                                    </div>
                                    <div className="flex space-x-3 mt-4">
                                        <button
                                            onClick={() => setSelectedProject(project)}
                                            className="flex-grow px-4 py-2 bg-blue-500 text-white rounded-lg shadow-sm hover:bg-blue-600 transition-colors duration-300 text-sm font-semibold"
                                        >
                                            Ver Plan
                                        </button>
                                        <button
                                            onClick={() => openDeleteModal(project.id)}
                                            className="p-2 bg-red-100 text-red-500 rounded-lg hover:bg-red-200 transition-colors duration-300"
                                            aria-label="Eliminar proyecto"
                                        >
                                           <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm4 0a1 1 0 012 0v6a1 1 0 11-2 0V8z" clipRule="evenodd"></path></svg>
                                        </button>
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                )}
            </div>
        </>
    );
};

/**
 * Componente ProjectView
 * Muestra el detalle de un proyecto, incluyendo sus fases, pasos y la interacción con IA.
 */
const ProjectView = ({ project, onBack, onUpdateProject }) => {
    const { db, userId } = useFirebase();
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

    const [localProject, setLocalProject] = useState(project);
    const [currentPhaseIndex, setCurrentPhaseIndex] = useState(project.currentPhaseIndex || 0);
    const [currentStepIndex, setCurrentStepIndex] = useState(project.currentStepIndex || 0);
    const [aiInput, setAiInput] = useState('');
    const [aiOutput, setAiOutput] = useState('');
    const [aiLoading, setAiLoading] = useState(false);
    const [message, setMessage] = useState('');

    const callGeminiAPI = async (prompt) => {
        if (!aiInput.trim() && !prompt.includes("generar ideas")) { // Some prompts don't need input
             setMessage("Por favor, ingresa un texto para que la IA lo procese.");
             return;
        }
        setAiLoading(true);
        setAiOutput('');
        setMessage('');
        
        try {
            const chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
            const payload = { contents: chatHistory };
            const apiKey = ""; // La clave de API es manejada por el entorno de Canvas
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`API Error: ${response.statusText}`);
            }

            const result = await response.json();
            const text = result.candidates[0].content.parts[0].text;
            
            setAiOutput(text);

            // Guardar la entrada y salida de la IA en el proyecto
            const updatedPhases = JSON.parse(JSON.stringify(localProject.phases));
            updatedPhases[currentPhaseIndex].steps[currentStepIndex].aiInput = aiInput;
            updatedPhases[currentPhaseIndex].steps[currentStepIndex].aiOutput = text;
            const updatedProject = { ...localProject, phases: updatedPhases };
            await updateProjectInFirestore(updatedProject);

        } catch (error) {
            console.error("Error en la interacción con IA:", error);
            setAiOutput("Ocurrió un error al contactar a la IA. Por favor, inténtalo de nuevo.");
        } finally {
            setAiLoading(false);
        }
    };

    // --- MANEJADORES DE ACCIONES DE IA ---
    const handleGenericAI = () => {
        const currentStep = localProject.phases[currentPhaseIndex]?.steps[currentStepIndex];
        const prompt = `Como asistente experto para emprendedores, da un consejo o una idea general para el paso "${currentStep.name}". Considera esta información del usuario: "${aiInput}"`;
        callGeminiAPI(prompt);
    };

    const handleGenerateCustomerProfile = () => {
        const prompt = `Basado en la siguiente descripción de un cliente o idea de negocio, crea un "Perfil de Cliente Ideal" detallado. Describe sus datos demográficos, sus "dolores" o problemas, sus "alegrías" o lo que desea lograr, y los mejores canales para comunicarte con él.\n\nDescripción del usuario: "${aiInput}"`;
        callGeminiAPI(prompt);
    };
    
    const handleGenerateNamesAndSlogans = () => {
        const prompt = `Basado en la siguiente descripción de un proyecto, genera 5 ideas de nombres creativos y 5 eslóganes o frases llamativas para el proyecto. Deben ser memorables y reflejar la esencia del negocio.\n\nDescripción del usuario: "${aiInput}"`;
        callGeminiAPI(prompt);
    };

    const handleGenerateSocialMediaIdeas = () => {
        const prompt = `Basado en el proyecto "${localProject.name}", que trata sobre "${aiInput}", genera un plan de contenido para redes sociales para una semana. Incluye 3 ideas de posts para Facebook y 3 ideas de posts para Instagram (pueden ser reels, historias o imágenes). Describe cada post brevemente.`;
        callGeminiAPI(prompt);
    };

    // Actualiza el estado local cuando el proyecto prop cambia (debido a onSnapshot).
    useEffect(() => {
        setLocalProject(project);
        setCurrentPhaseIndex(project.currentPhaseIndex || 0);
        setCurrentStepIndex(project.currentStepIndex || 0);
        const currentStep = project.phases[project.currentPhaseIndex]?.steps[project.currentStepIndex];
        if (currentStep) {
            setAiInput(currentStep.aiInput || '');
            setAiOutput(currentStep.aiOutput || '');
        }
    }, [project]);

    // Función memoizada para actualizar el proyecto en Firestore.
    const updateProjectInFirestore = useCallback(async (updatedProject) => {
        if (!db || !userId) {
            setMessage("Error: No se pudo conectar a la base de datos.");
            return;
        }
        try {
            const projectDocRef = doc(db, `artifacts/${appId}/users/${userId}/projects`, updatedProject.id);
            await setDoc(projectDocRef, updatedProject, { merge: true });
            onUpdateProject(updatedProject); // Notifica al componente padre para una UI reactiva.
        } catch (error) {
            console.error("Error al actualizar el proyecto:", error);
            setMessage("Error al actualizar el proyecto.");
        }
    }, [db, userId, appId, onUpdateProject]);

    // Marca un paso como completado y avanza al siguiente.
    const handleMarkStepComplete = async (phaseIdx, stepIdx) => {
        const updatedPhases = JSON.parse(JSON.stringify(localProject.phases)); // Deep copy
        updatedPhases[phaseIdx].steps[stepIdx].status = 'completed';

        let nextPhaseIdx = currentPhaseIndex;
        let nextStepIdx = currentStepIndex + 1;

        if (nextStepIdx >= updatedPhases[nextPhaseIdx].steps.length) {
            nextPhaseIdx++;
            nextStepIdx = 0;
            if (nextPhaseIdx >= updatedPhases.length) {
                setMessage("¡Felicidades! Has completado todos los pasos del plan.");
                nextPhaseIdx = updatedPhases.length - 1;
                nextStepIdx = updatedPhases[nextPhaseIdx].steps.length - 1;
            }
        }
        
        const updatedProject = {
            ...localProject,
            phases: updatedPhases,
            currentPhaseIndex: nextPhaseIdx,
            currentStepIndex: nextStepIdx,
        };
        await updateProjectInFirestore(updatedProject);
    };

    // Navega a un paso específico del plan.
    const goToStep = (phaseIdx, stepIdx) => {
        setCurrentPhaseIndex(phaseIdx);
        setCurrentStepIndex(stepIdx);
        const currentStep = localProject.phases[phaseIdx]?.steps[stepIdx];
        if (currentStep) {
            setAiInput(currentStep.aiInput || '');
            setAiOutput(currentStep.aiOutput || '');
        }
    };


    const currentPhase = localProject.phases[currentPhaseIndex];
    const currentStep = currentPhase?.steps[currentStepIndex];
    const totalSteps = localProject.phases.reduce((acc, phase) => acc + phase.steps.length, 0);
    const completedSteps = localProject.phases.reduce((acc, phase) => acc + phase.steps.filter(step => step.status === 'completed').length, 0);
    const progressPercentage = totalSteps > 0 ? (completedSteps / totalSteps) * 100 : 0;

    const renderAIToolbox = () => {
        const stepName = currentStep?.name;
        if (!stepName) return null;
        
        return(
            <div className="mt-4 p-4 border-t border-gray-200">
                 <h5 className="font-semibold text-gray-700 mb-3">Herramientas IA para este paso:</h5>
                 <div className="flex flex-wrap gap-2">
                    {stepName === "Crear el Perfil del Cliente Ideal" && (
                        <button onClick={handleGenerateCustomerProfile} disabled={aiLoading} className="px-4 py-2 bg-teal-500 text-white text-sm font-semibold rounded-lg shadow-md hover:bg-teal-600 transition-all duration-300 disabled:opacity-50 flex items-center gap-2">
                           ✨ Generar Perfil de Cliente
                        </button>
                    )}
                     {stepName === "Generar Nombres, Slogans y Textos Atractivos" && (
                        <button onClick={handleGenerateNamesAndSlogans} disabled={aiLoading} className="px-4 py-2 bg-sky-500 text-white text-sm font-semibold rounded-lg shadow-md hover:bg-sky-600 transition-all duration-300 disabled:opacity-50 flex items-center gap-2">
                           ✨ Sugerir Nombres y Slogans
                        </button>
                    )}
                     {stepName === "Crear una Estrategia para Redes Sociales" && (
                        <button onClick={handleGenerateSocialMediaIdeas} disabled={aiLoading} className="px-4 py-2 bg-rose-500 text-white text-sm font-semibold rounded-lg shadow-md hover:bg-rose-600 transition-all duration-300 disabled:opacity-50 flex items-center gap-2">
                           ✨ Generar Ideas para Redes
                        </button>
                    )}
                    <button
                        onClick={handleGenericAI}
                        disabled={aiLoading}
                        className="px-4 py-2 bg-gray-600 text-white text-sm font-semibold rounded-lg shadow-md hover:bg-gray-700 transition-all duration-300 disabled:opacity-50 flex items-center gap-2"
                    >
                         💡 Asistente General
                    </button>
                 </div>
            </div>
        )
    }

    return (
        <div className="bg-white p-6 sm:p-8 rounded-xl shadow-lg animate-fade-in">
            <button
                onClick={onBack}
                className="mb-6 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg shadow-md hover:bg-gray-300 transition-colors duration-300 flex items-center"
            >
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path></svg>
                Volver a Proyectos
            </button>

            {message && <div className="bg-blue-100 text-blue-700 p-3 rounded-lg mb-4 text-center">{message}</div>}

            <h2 className="text-3xl font-bold text-indigo-800 mb-2">{localProject.name}</h2>
            <p className="text-gray-600 text-md mb-6">{localProject.description}</p>

            <div className="mb-8">
                <h3 className="text-lg font-semibold text-gray-700 mb-2">Progreso del Proyecto: {progressPercentage.toFixed(1)}%</h3>
                <div className="w-full bg-gray-200 rounded-full h-4">
                    <div
                        className="bg-green-500 h-4 rounded-full transition-all duration-500 ease-out flex items-center justify-center text-white text-xs font-bold"
                        style={{ width: `${progressPercentage}%` }}
                    >
                       {progressPercentage > 10 && `${progressPercentage.toFixed(0)}%`}
                    </div>
                </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
                {/* Panel de Navegación de Fases */}
                <aside className="lg:col-span-1 bg-gray-50 p-4 rounded-xl shadow-inner">
                    <h3 className="text-xl font-bold text-indigo-700 mb-4 sticky top-0 bg-gray-50 py-2">Fases del Plan</h3>
                    <nav className="space-y-4">
                        {localProject.phases.map((phase, pIdx) => (
                            <div key={pIdx}>
                                <div className="flex items-center justify-between">
                                    <h4 className={`text-left font-semibold flex items-center transition-colors duration-300 ${pIdx === currentPhaseIndex ? 'text-indigo-600' : 'text-gray-800'}`}>
                                       {`Fase ${pIdx + 1}`}
                                    </h4>
                                    {phase.steps.every(s => s.status === 'completed') && (
                                      <svg className="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd"></path></svg>
                                    )}
                                </div>
                                <p className="text-xs text-gray-500 mb-2">{phase.name}</p>
                                <ul className="pl-4 border-l-2 border-indigo-200 space-y-1">
                                    {phase.steps.map((step, sIdx) => (
                                        <li key={sIdx}>
                                            <button
                                                onClick={() => goToStep(pIdx, sIdx)}
                                                className={`w-full text-left p-2 text-sm rounded-md flex items-center transition-all duration-300 ease-in-out group
                                                    ${pIdx === currentPhaseIndex && sIdx === currentStepIndex ? 'bg-indigo-100 text-indigo-800 font-bold' : 'text-gray-700 hover:bg-gray-200'}`}
                                            >
                                                <span className={`w-2.5 h-2.5 rounded-full mr-3 flex-shrink-0 transition-colors duration-300
                                                    ${step.status === 'completed' ? 'bg-green-500' : (pIdx === currentPhaseIndex && sIdx === currentStepIndex ? 'bg-indigo-500' : 'bg-gray-400 group-hover:bg-gray-500')}`}></span>
                                                {step.name}
                                            </button>
                                        </li>
                                    ))}
                                </ul>
                            </div>
                        ))}
                    </nav>
                </aside>

                {/* Contenido del Paso Actual */}
                <main className="lg:col-span-3 bg-white p-6 rounded-xl shadow-lg border border-gray-100">
                    {currentPhase && currentStep ? (
                        <>
                            <h3 className="text-2xl font-bold text-blue-700 mb-3">{`Paso Actual: ${currentStep.name}`}</h3>
                            <p className="text-gray-700 mb-6 leading-relaxed">{currentStep.description}</p>

                            <div className="bg-indigo-50 p-6 rounded-lg mb-6 shadow-md">
                                <h4 className="text-xl font-semibold text-indigo-700 mb-4 flex items-center">
                                    Cuéntale a la IA sobre tu idea
                                </h4>
                                <div className="relative">
                                    <textarea
                                        className="w-full p-3 pr-10 border border-indigo-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 mb-4 min-h-[120px] transition-shadow"
                                        placeholder="Escribe aquí los detalles de tu proyecto o las ideas que tienes para este paso..."
                                        value={aiInput}
                                        onChange={(e) => setAiInput(e.target.value)}
                                        rows="5"
                                    ></textarea>
                                    <CopyButton textToCopy={aiInput} />
                                </div>
                                
                                {aiLoading ? <div className="flex justify-center items-center p-4"><LoadingSpinner/> <span className="ml-3 text-gray-700">La IA está pensando...</span></div> : renderAIToolbox()}

                                {aiOutput && (
                                    <div className="relative mt-6 p-4 bg-indigo-100 rounded-lg border border-indigo-200 animate-fade-in">
                                        <h5 className="font-semibold text-indigo-800 mb-2">Respuesta de la IA:</h5>
                                        <pre className="whitespace-pre-wrap font-sans text-sm text-indigo-900 bg-transparent p-1 rounded-md overflow-x-auto">
                                            {aiOutput}
                                        </pre>
                                        <CopyButton textToCopy={aiOutput} />
                                    </div>
                                )}
                            </div>

                            {currentStep.status !== 'completed' && (
                                <button
                                    onClick={() => handleMarkStepComplete(currentPhaseIndex, currentStepIndex)}
                                    className="px-6 py-3 bg-purple-600 text-white font-semibold rounded-lg shadow-md hover:bg-purple-700 transition-all duration-300 ease-in-out transform hover:scale-105 w-full sm:w-auto"
                                >
                                    Marcar como Completado y Avanzar
                                </button>
                            )}
                        </>
                    ) : (
                        <p className="text-gray-600 text-center py-10">Selecciona una fase y un paso para comenzar.</p>
                    )}
                </main>
            </div>
        </div>
    );
};

/**
 * Componente Principal de la Aplicación (App)
 * Gestiona la inicialización de Firebase, la autenticación y el enrutamiento principal.
 */
const App = () => {
    const [firebase, setFirebase] = useState({ db: null, auth: null });
    const [userId, setUserId] = useState(null);
    const [authStatus, setAuthStatus] = useState('loading'); // 'loading', 'authed', 'no-auth'
    const [error, setError] = useState(null);
    
    // Inicializa Firebase y gestiona la autenticación del usuario.
    useEffect(() => {
        try {
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
            const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

            if (!firebaseConfig) {
                throw new Error("La configuración de Firebase no está disponible.");
            }
            
            const app = initializeApp(firebaseConfig);
            const auth = getAuth(app);
            const db = getFirestore(app);
            
            setFirebase({ db, auth });

            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    setUserId(user.uid);
                    setAuthStatus('authed');
                } else {
                    try {
                        if (initialAuthToken) {
                            await signInWithCustomToken(auth, initialAuthToken);
                        } else {
                            await signInAnonymously(auth);
                        }
                    } catch (authError) {
                       console.error("Error de autenticación:", authError);
                       setError("No se pudo iniciar sesión. La aplicación puede no funcionar correctamente.");
                       setAuthStatus('no-auth');
                    }
                }
            });

        } catch (err) {
            console.error("Error de inicialización de Firebase:", err);
            setError("Error al cargar la aplicación. Por favor, refresca la página.");
            setAuthStatus('no-auth');
        }
    }, []);

    const handleSignOut = async () => {
        if (firebase.auth) {
            try {
                await signOut(firebase.auth);
                setUserId(null);
                setAuthStatus('no-auth');
            } catch (err) {
                console.error("Error al cerrar sesión:", err);
                setError("No se pudo cerrar la sesión.");
            }
        }
    };

    const renderContent = () => {
        if (authStatus === 'loading') {
            return <div className="flex items-center justify-center h-full text-lg text-gray-700">Cargando aplicación...</div>;
        }
        if (error) {
            return <div className="p-4 m-4 text-center text-lg text-red-700 bg-red-100 rounded-lg">{error}</div>;
        }
        return (
            <>
                <header className="bg-white shadow-md p-4 flex justify-between items-center rounded-b-xl sticky top-0 z-10 w-full">
                    <h1 className="text-base sm:text-xl font-bold text-indigo-700 text-center w-full">Movimiento Plateado - Crucelia Ocampo - Ramiro Paniagua</h1>
                    {authStatus === 'authed' && userId && (
                        <div className="flex items-center space-x-2 sm:space-x-4 ml-auto absolute right-4">
                            <button
                                onClick={handleSignOut}
                                className="px-3 py-2 sm:px-4 bg-red-500 text-white rounded-lg shadow-md hover:bg-red-600 transition-colors duration-300 text-sm font-semibold"
                            >
                                Salir
                            </button>
                        </div>
                    )}
                </header>
                <main className="container mx-auto p-4 sm:p-6 flex-grow w-full">
                    {authStatus === 'authed' && userId ? <Dashboard /> : <p className="text-center text-lg mt-8">Inicia sesión para gestionar tus proyectos.</p>}
                </main>
            </>
        );
    }

    return (
        <FirebaseContext.Provider value={{ ...firebase, userId }}>
            <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 font-sans text-gray-900 flex flex-col">
                {renderContent()}
                 <footer className="text-center p-4 text-gray-600 text-sm mt-auto">
                    www.movimientoplateado.com
                </footer>
            </div>
        </FirebaseContext.Provider>
    );
};

export default App;
